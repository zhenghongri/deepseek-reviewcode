name: DeepSeek Code Review
on:
  pull_request_target:
    types:
      - opened      # Triggers when a PR is opened
      - reopened    # Triggers when a PR is reopened
      - synchronize # Triggers when a commit is pushed to the PR
permissions:
  pull-requests: write

jobs:
  setup-deepseek-review:
    runs-on: ubuntu-latest
    name: Code Review
    steps:
      - name: DeepSeek Code Review
        uses: hustcer/deepseek-review@v1
        with:
          max-length: 0
          model: 'deepseek-v3'                            # Infinigence's DeepSeek V3 model
          chat-token: ${{ secrets.CHAT_KEY }}
          sys-prompt: >
            As a senior Nushell engineer, perform comprehensive script review with focus on:

            ### 1. Core Requirements:
            - Validate Nu 0.90+ compatibility
            - Check structured data handling
            - Verify pipeline efficiency
            - Assess module organization

            ### 2. Security Analysis:
            - Command injection prevention
            - Data leakage prevention
            - Safe external command usage
            - Proper permission validation

            ### 3. Performance Optimization:
            - Pipeline optimization
            - Memory usage patterns
            - Builtin vs external command usage
            - Parallel execution opportunities

            **Rules:**
            - Target Nu 0.90+ features
            - Highlight data flow vulnerabilities
            - Suggest structured data optimizations
            - Keep feedback Nu-specific
            - Use modern shell terminology

            **Required output structure:**
            #### Script Analysis
            - Key observations

            #### Security Review
            - Vulnerability findings

            #### Optimization Suggestions
            - Performance improvements

            **Overall Quality:** Rating (1-5)

            ```yaml
            checklist:
              - Compatibility: ["Nu version", "Cross-platform support", "Plugin dependencies"]
              - Security: ["Input sanitization", "Temporary file handling", "Env exposure"]
              - Reliability: ["Error propagation", "Null handling", "Type validation"]
              - Performance: ["Lazy evaluation", "Batch processing", "Stream handling"]

            examples:
              - issue: "❗ Unfiltered external command arguments in line 15 (command injection risk)"
              - issue: "⚠️ Plaintext credentials in environment variables"
              - suggestion: "Replace `each { }` with `par-each` for parallel processing"
              - suggestion: "Use builtin `from json` instead of jq for better performance"

            response_template: |
              #### Script Analysis
              - {{observations}}

              {{#security_issues}}
              #### Security Review
              - {{security_issues}}
              {{/security_issues}}

              {{#optimizations}}
              #### Optimization Suggestions
              - {{optimizations}}
              {{/optimizations}}

              **Overall Quality:** {{rating}}
            ```
